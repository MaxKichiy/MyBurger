{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","containers/Auth/Auth.module.css"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthMethod","prevState","this","buildingBurger","authRedirect","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","isAuth","to","className","ss","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","authRedirectPath","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label","module","exports","rules","isValid","trim","length","maxLength","isNumeric","test"],"mappings":"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","file":"static/js/4.b30e6c5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport ss from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail Address',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirect !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  // checkValidity = (value, rules) => {\r\n  //   let isValid = true;\r\n\r\n  //   if (rules.required) {\r\n  //     isValid = value.trim() !== '' && isValid;\r\n  //   }\r\n  //   if (rules.minLength) {\r\n  //     isValid = value.length >= rules.minLength && isValid;\r\n  //   }\r\n  //   if (rules.maxLength) {\r\n  //     isValid = value.length <= rules.maxLength && isValid;\r\n  //   }\r\n  //   if (rules.isNumeric) {\r\n  //     const pattern = /^\\d+$/;\r\n  //     isValid = pattern.test(value) && isValid;\r\n  //   }\r\n\r\n  //   return isValid;\r\n  // };\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...this.state.controls,\r\n      [controlName]: {\r\n        ...this.state.controls[controlName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthMethod = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.elementConfig.value}\r\n        invalid={!formElement.config.value}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to={this.props.authRedirect} />;\r\n    }\r\n    return (\r\n      <div className={ss.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType='Success'>SUBMIT</Button>\r\n        </form>\r\n        <Button btnType='Danger' clicked={this.switchAuthMethod}>\r\n          SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirect: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react';\r\n\r\nimport ss from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [ss.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(ss.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option, id) => (\r\n            <option key={id} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={ss.Input}>\r\n      <label className={ss.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ERBd\",\"Label\":\"Input_Label__2LV4f\",\"InputElement\":\"Input_InputElement__2c43J\",\"Invalid\":\"Input_Invalid__3SNlw\"};","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__17AJH\",\"Input\":\"Auth_Input__1FWnb\"};"],"sourceRoot":""}