{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","ss","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","IsValidate","setValidation","orderHandler","event","preventDefault","formData","formElementId","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","inputId","updatedOrderForm","updatedFormElement","target","checkValidity","formIsValid","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","useEffect","summary","to","purchasedRedirect","history","goBack","replace","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports","rules","isValid","trim","minLength","length","maxLength","isNumeric","test"],"mappings":"kKAuBeA,EAjBS,SAACC,GACvB,OACE,yBAAKC,UAAWC,IAAGC,iBACjB,uDACA,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnC,kBAACC,EAAA,EAAD,CAAQC,YAAaR,EAAMQ,eAE7B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASX,EAAMY,mBAAxC,UAGA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASX,EAAMa,mBAAzC,c,+FCiMSC,eAhBS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1BU,MAAOH,EAAME,cAAcE,WAC3BC,QAASL,EAAMM,MAAMD,QACrBE,MAAOP,EAAMQ,KAAKD,MAClBE,OAAQT,EAAMQ,KAAKC,WAII,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACC,EAAWL,GAAZ,OACbG,EAASG,IAAuBD,EAAWL,QAGlCR,CAGbe,aAxMkB,SAAC7B,GAAW,IAAD,EACK8B,mBAAS,CACzCC,KAAM,CACJC,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,aAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXC,OAAQ,CACNT,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,UAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXE,QAAS,CACPV,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,YAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXG,QAAS,CACPX,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,WAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXI,MAAO,CACLZ,YAAa,QACbC,cAAe,CACbC,KAAM,QACNC,YAAa,eAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXK,eAAgB,CACdb,YAAa,SACbC,cAAe,CACba,QAAS,CACP,CAAEV,MAAO,UAAWW,aAAc,WAClC,CAAEX,MAAO,WAAYW,aAAc,aAErCZ,YAAa,IAEfC,MAAO,UACPG,OAAO,EACPF,WAAY,MA9Ea,mBACtBW,EADsB,KACXC,EADW,OAiFOnB,oBAAS,GAjFhB,mBAiFtBoB,EAjFsB,KAiFVC,EAjFU,KAmFvBC,EAAe,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAiBR,EACxBO,EAASC,GAAiBR,EAAUQ,GAAepB,MAGrD,IAAMf,EAAQ,CACZb,YAAaR,EAAMgB,KACnBE,MAAOlB,EAAMkB,MACbS,UAAW4B,EACX/B,OAAQxB,EAAMwB,QAGhBxB,EAAM0B,cAAcL,EAAOrB,EAAMsB,QAG7BmC,EAAoB,GAC1B,IAAK,IAAIC,KAAOV,EACdS,EAAkBE,KAAK,CACrBC,GAAIF,EACJG,OAAQb,EAAUU,KAuBtB,IAsBII,EACF,0BAAMC,SAAUX,GACbK,EAAkBO,KAAI,SAACC,GAAD,OACrB,kBAACC,EAAA,EAAD,CACER,IAAKO,EAAYL,GACjB5B,YAAaiC,EAAYJ,OAAO7B,YAChCC,cAAegC,EAAYJ,OAAO5B,cAClCG,MAAO6B,EAAYJ,OAAO5B,cAAcG,MACxC+B,SAAUF,EAAYJ,OAAOzB,MAC7BgC,eAAgBH,EAAYJ,OAAOxB,WACnCG,QAASyB,EAAYJ,OAAOrB,QAC5B6B,QAAS,SAAChB,GAAD,OAjCW,SAACA,EAAOiB,GAClC,IAAMC,EAAgB,eACjBvB,GAECwB,EAAkB,eACnBD,EAAiBD,IAEtBE,EAAmBpC,MAAQiB,EAAMoB,OAAOrC,MACxCoC,EAAmBjC,MAAQmC,YACzBF,EAAmBpC,MACnBoC,EAAmBnC,YAErBkC,EAAiBD,GAAWE,EAC5BA,EAAmBhC,SAAU,EAC7B,IAAImC,GAAc,EAClB,IAAK,IAAIL,KAAWC,EAClBI,EAAcJ,EAAiBD,GAAS/B,OAASoC,EAEnD1B,EAAasB,GACbpB,EAAcwB,GAcYC,CAAoBvB,EAAOY,EAAYL,UAI/D,kBAACnD,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASyC,EAAcyB,UAAW3B,GAA5D,UASJ,OAJIlD,EAAMoB,UACR0C,EAAO,kBAACgB,EAAA,EAAD,OAIP,yBAAK7E,UAAWC,IAAG6E,aACjB,uDACCjB,KAwByBkB,MC9IjBlE,uBARS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAME,cAAcT,YAC1BU,MAAOH,EAAME,cAAcE,WAC3B8D,UAAWlE,EAAMM,MAAM4D,aAIZnE,EA9DE,SAACd,GAShBkF,qBAAU,cAaP,IAEH,IAQIC,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAC3B,GAAIpF,EAAMgB,KAAM,CACd,IAAMqE,EAAoBrF,EAAMiF,UAAY,kBAAC,IAAD,CAAUG,GAAG,MAAS,KAClED,EACE,6BACGE,EACD,kBAAClF,EAAD,CACEK,YAAaR,EAAMgB,KACnBJ,kBAhByB,WAC/BZ,EAAMsF,QAAQC,UAgBR1E,kBAbyB,WAC/Bb,EAAMsF,QAAQE,QAAQ,6BAclB,kBAAC,IAAD,CACEC,KAAMzF,EAAM0F,MAAMD,KAAO,gBACzBE,UAAWZ,KAMnB,OAAOI,M,gCC3DT,qCAiEejB,IA7DD,SAAClE,GACb,IAAI4F,EAAe,KACbC,EAAe,CAAC3F,IAAG4F,cAMzB,OAJI9F,EAAMmE,SAAWnE,EAAMoE,gBAAkBpE,EAAMwC,SACjDqD,EAAalC,KAAKzD,IAAG6F,SAGf/F,EAAMgC,aACZ,IAAK,QACH4D,EACE,yCACE3F,UAAW4F,EAAaG,KAAK,MACzBhG,EAAMiC,cAFZ,CAGEG,MAAOpC,EAAMoC,MACb6D,SAAUjG,EAAMqE,WAGpB,MACF,IAAK,WACHuB,EACE,8CACM5F,EAAMiC,cADZ,CAEEG,MAAOpC,EAAMoC,MACb6D,SAAUjG,EAAMqE,WAGpB,MACF,IAAK,SACHuB,EACE,4BACE3F,UAAW4F,EAAaG,KAAK,KAC7B5D,MAAOpC,EAAMoC,MACb6D,SAAUjG,EAAMqE,SAEfrE,EAAMiC,cAAca,QAAQkB,KAAI,SAACkC,EAAQtC,GAAT,OAC/B,4BAAQF,IAAKE,EAAIxB,MAAO8D,EAAO9D,OAC5B8D,EAAOnD,kBAKhB,MACF,QACE6C,EACE,yCACE3F,UAAW4F,EAAaG,KAAK,MACzBhG,EAAMiC,cAFZ,CAGEG,MAAOpC,EAAMoC,SAKrB,OACE,yBAAKnC,UAAWC,IAAGgE,OACjB,2BAAOjE,UAAWC,IAAGiG,OAAQnG,EAAMoG,OAClCR,K,mBC3DPS,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,gCCDjI,kCAAO,IAAM5B,EAAgB,SAACtC,EAAOmE,GACnC,IAAIC,GAAU,EAWd,GATID,EAAMjE,WACRkE,EAA2B,KAAjBpE,EAAMqE,QAAiBD,GAE/BD,EAAMG,YACRF,EAAUpE,EAAMuE,QAAUJ,EAAMG,WAAaF,GAE3CD,EAAMK,YACRJ,EAAUpE,EAAMuE,QAAUJ,EAAMK,WAAaJ,GAE3CD,EAAMM,UAAW,CAEnBL,EADgB,QACEM,KAAK1E,IAAUoE,EAGnC,OAAOA,I,mBChBTH,EAAOC,QAAU,CAAC,gBAAkB,2C,mBCApCD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ","file":"static/js/3.a9a81335.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport ss from '../CheckoutSummary/CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={ss.CheckoutSummary}>\r\n      <h1>We hope it tastes good!</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType='Danger' clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType='Success' clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport ss from '../ContactData/ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { checkValidity } from '../../../shared/utility';\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Street',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'ZIP Code',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Country',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your E-Mail',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: 'select',\r\n      elementConfig: {\r\n        options: [\r\n          { value: 'fastest', displayValue: 'Fastest' },\r\n          { value: 'cheapest', displayValue: 'Cheapest' },\r\n        ],\r\n        placeholder: '',\r\n      },\r\n      value: 'fastest',\r\n      valid: true,\r\n      validation: {},\r\n    },\r\n  });\r\n  const [IsValidate, setValidation] = useState(false);\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementId in orderForm) {\r\n      formData[formElementId] = orderForm[formElementId].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n\r\n  // const checkValidity = (value, rules) => {\r\n  //   let isValid = true;\r\n\r\n  //   if (rules.required) {\r\n  //     isValid = value.trim() !== '' && isValid;\r\n  //   }\r\n  //   if (rules.minLength) {\r\n  //     isValid = value.length >= rules.minLength && isValid;\r\n  //   }\r\n  //   if (rules.maxLength) {\r\n  //     isValid = value.length <= rules.maxLength && isValid;\r\n  //   }\r\n  //   if (rules.isNumeric) {\r\n  //     const pattern = /^\\d+$/;\r\n  //     isValid = pattern.test(value) && isValid;\r\n  //   }\r\n\r\n  //   return isValid;\r\n  // };\r\n  const inputChangedHandler = (event, inputId) => {\r\n    const updatedOrderForm = {\r\n      ...orderForm,\r\n    };\r\n    const updatedFormElement = {\r\n      ...updatedOrderForm[inputId],\r\n    };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.valid = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedOrderForm[inputId] = updatedFormElement;\r\n    updatedFormElement.touched = true;\r\n    let formIsValid = true;\r\n    for (let inputId in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setValidation(formIsValid);\r\n  };\r\n\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.elementConfig.value}\r\n          invalid={!formElement.config.value}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n\r\n      <Button btnType='Success' clicked={orderHandler} disabled={!IsValidate}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={ss.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from 'react';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Checkout = (props) => {\r\n  // const [ingredients, setIngredients] = useState({\r\n  //   salad: 0,\r\n  //   cheese: 0,\r\n  //   meat: 0,\r\n  //   bacon: 0,\r\n  // });\r\n  // const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n  useEffect(() => {\r\n    //   const query = new URLSearchParams(props.location.search);\r\n    //   const getingredients = {};\r\n    //   let price = 0;\r\n    //   for (let param of query.entries()) {\r\n    //     if (param[0] === 'price') {\r\n    //       price = param[1];\r\n    //     } else {\r\n    //       getingredients[param[0]] = +param[1];\r\n    //     }\r\n    //   }\r\n    //   setIngredients(getingredients);\r\n    //   setTotalPrice(price);\r\n  }, []);\r\n\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace('/checkout/contact-data');\r\n  };\r\n\r\n  let summary = <Redirect to='/' />;\r\n  if (props.ings) {\r\n    const purchasedRedirect = props.purchased ? <Redirect to='/' /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n        <Route\r\n          path={props.match.path + '/contact-data'}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\n\r\nimport ss from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [ss.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(ss.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option, id) => (\r\n            <option key={id} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={ss.Input}>\r\n      <label className={ss.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ERBd\",\"Label\":\"Input_Label__2LV4f\",\"InputElement\":\"Input_InputElement__2c43J\",\"Invalid\":\"Input_Invalid__3SNlw\"};","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__zzAiD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1-HgG\",\"Input\":\"ContactData_Input__3eKhr\"};"],"sourceRoot":""}