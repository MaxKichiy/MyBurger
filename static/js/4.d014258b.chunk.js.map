{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","ss","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","id","key","displayValue","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isNumeric","test","connect","state","loading","auth","error","isAuth","token","buildingBurger","burgerBuilder","building","authRedirect","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","valid","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","config","form","formElement","event","controlName","updatedControls","target","inputChangedHandler","errorMessage","message","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.d014258b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport ss from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [ss.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(ss.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option, id) => (\r\n            <option key={id} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={ss.Input}>\r\n      <label className={ss.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1ERBd\",\"Label\":\"Input_Label__2LV4f\",\"InputElement\":\"Input_InputElement__2c43J\",\"Invalid\":\"Input_Invalid__3SNlw\"};","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n  if (rules.isNumeric) {\r\n    const pattern = /^\\d+$/;\r\n    isValid = pattern.test(value) && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__17AJH\",\"Input\":\"Auth_Input__1FWnb\"};","import React from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport ss from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { checkValidity } from '../../shared/utility';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst Auth = (props) => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Mail Address',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password',\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n  const [isSignup, setIsSignup] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!props.buildingBurger && props.authRedirect !== '/') {\r\n      props.onSetAuthRedirectPath();\r\n    }\r\n  }, []);\r\n\r\n  // checkValidity = (value, rules) => {\r\n  //   let isValid = true;\r\n\r\n  //   if (rules.required) {\r\n  //     isValid = value.trim() !== '' && isValid;\r\n  //   }\r\n  //   if (rules.minLength) {\r\n  //     isValid = value.length >= rules.minLength && isValid;\r\n  //   }\r\n  //   if (rules.maxLength) {\r\n  //     isValid = value.length <= rules.maxLength && isValid;\r\n  //   }\r\n  //   if (rules.isNumeric) {\r\n  //     const pattern = /^\\d+$/;\r\n  //     isValid = pattern.test(value) && isValid;\r\n  //   }\r\n\r\n  //   return isValid;\r\n  // };\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...authForm,\r\n      [controlName]: {\r\n        ...authForm[controlName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        ),\r\n        touched: true,\r\n      },\r\n    };\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthMethod = () => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key],\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map((formElement) => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.elementConfig.value}\r\n      invalid={!formElement.config.value}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={(event) => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (props.isAuth) {\r\n    authRedirect = <Redirect to={props.authRedirect} />;\r\n  }\r\n  return (\r\n    <div className={ss.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType='Success'>SUBMIT</Button>\r\n      </form>\r\n      <Button btnType='Danger' clicked={switchAuthMethod}>\r\n        SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirect: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}